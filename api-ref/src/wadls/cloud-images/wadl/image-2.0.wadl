<?xml version="1.0" encoding="UTF-8"?>
<!-- (C) 2012-2013 OpenStack Foundation, All Rights Reserved -->
<!--*******************************************************-->
<!--         Import Common XML Entities                    -->
<!--                                                       -->
<!--     You can resolve the entites with xmllint          -->
<!--                                                       -->
<!--        xmllint -noent os-image-2.0.wadl               -->
<!--*******************************************************-->
<!DOCTYPE application [<!ENTITY % common  SYSTEM "../common/common.ent">
%common;]>
<application xmlns="http://wadl.dev.java.net/2009/02"
    xmlns:wadl="http://wadl.dev.java.net/2009/02"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:imageapi="http://docs.openstack.org/image/api/v2.0"
    xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:csapi="http://docs.openstack.org/compute/api/v2"
    xmlns:common="http://docs.openstack.org/common/api/v1.0">
    <grammars>
        <include href="../common/xsd/api.xsd"/>
        <include href="../common/xsd/api-common.xsd"/>
        <include href="../common/xsd/fault.xsd"/>
    </grammars>

    <!--*******************************************************-->
    <!--             All Resources                             -->
    <!--*******************************************************-->
    <!--<resources base="https://glance.example.com/" xml:id="images-v2">-->
    <resources base="https://ord.images.api.rackspacecloud.com/"
        xml:id="images-v2">
        <resource id="versions" path="v2">
            <resource id="account" path="{account}">
                <param name="account" style="template" required="true">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook"
                        xml:lang="EN"><para>The tenant ID.</para>
                    </wadl:doc>
                </param>
                <resource id="Images" path="images">
                    <method href="#listImages"/>
                    <resource id="ImageID" path="{image_id}">
                        <param name="image_id" style="template"
                            type="csapi:uuid">
                            <wadl:doc
                                xmlns="http://docbook.org/ns/docbook"
                                xml:lang="EN" title="Image ID">
                                <para>Image ID stored through the
                                   image API, typically a UUID.</para>
                            </wadl:doc>
                        </param>
                        <method href="#getImage"/>
                        <method href="#updateImage"/>
                        <method href="#deleteImage"/>
                        <resource id="Tags" path="tags">
                            <resource id="Tagstag" path="{tag}">
                                <param name="tag" style="template"
                                   type="xsd:string">
                                   <wadl:doc
                                   xmlns="http://www.w3.org/1999/xhtml"
                                   xml:lang="EN" title="Tag">
                                   <para>Image tag (may be up to 255
                                   characters in length).</para>
                                   </wadl:doc>
                                </param>
                                <method href="#addImageTag"/>
                                <method href="#deleteImageTag"/>
                            </resource>
                        </resource>
                        <resource id="Members" path="members">
                            <method href="#createImageMember"/>
                            <method href="#listImageMembers"/>
                            <resource id="MemberID" path="{member_id}">
                                <param name="member_id"
                                   style="template" type="xsd:string">
                                   <wadl:doc
                                   xmlns="http://www.w3.org/1999/xhtml"
                                   xml:lang="EN" title="Members">
                                   <para>Image member ID. For example,
                                   the tenant ID of the user with whom
                                   the image is being shared.</para>
                                   </wadl:doc>
                                </param>
                                <method href="#getImageMember"/>
                                <method href="#deleteImageMember"/>
                                <method href="#updateImageMember"/>
                            </resource>
                        </resource>
                    </resource>
                </resource>
                <resource id="Tasks" path="tasks">
                    <method href="#importImage"/>
                    <method href="#exportImage"/>
                    <method href="#listTasks"/>
                    <resource id="TaskID" path="{taskID}">
                        <param name="task_id" style="template"
                            type="csapi:uuid">
                            <wadl:doc
                                xmlns="http://docbook.org/ns/docbook"
                                xml:lang="EN" title="Task ID">
                                <para>The task id. This task id is the
                                   same as the id parameter returned
                                   in the Import Task or Export Task
                                   operation response body.</para>
                            </wadl:doc>
                        </param>
                        <method href="#getTask"/>
                    </resource>
                </resource>
            </resource>
        </resource>
    </resources>

    <!--*******************************************************-->
    <!--               All Methods                             -->
    <!--*******************************************************-->

    <!-- ================ -->
    <!-- Image Operations -->
    <!-- ================ -->

    <!-- List Images -->
    <method name="GET" id="listImages">
        <wadl:doc xml:lang="EN" title="List images"
            xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">Lists public virtual machine (VM)
                images.</para>
            <para>This operation returns images you created, shared
                images that you accepted, and standard images. For
                more information about standard images, see <xref
                    linkend="std-images"/>. The response conforms to
                the schema found in <xref
                    linkend="GET_getImagesSchema_schemas_images_Schema_Calls"
                />.</para>
            <para> This operation returns a subset of the larger
                collection of images and a link that you can use to
                get the next set of images. Always check for the
                presence of a <parameter>next</parameter> link and use
                it as the URI in a subsequent &GET; request. Follow
                this pattern until a <parameter>next</parameter> link
                is no longer provided. The next link preserves any
                query parameters that you send in your initial
                request. You can use the <parameter>first</parameter>
                link to jump back to the first page of the collection.
                If you prefer to paginate through images manually, use
                the <parameter>limit</parameter> and
                    <parameter>marker</parameter> parameters. </para>
            <para>The List Images operation accepts several types of
                query parameters that you can use to filter the
                results of the returned collection. </para>
            <para>A client can provide direct comparison filters by
                using most image attributes, such as
                    <code>name=Ubuntu</code>,
                    <code>visibility=public</code>, and so on. A
                client cannot filter on tags or anything defined as a
                link in the json-schema, such as
                    <parameter>self</parameter>,
                    <parameter>file</parameter>, or
                    <parameter>schema</parameter>. </para>
            <para>You can use the <parameter>size_min</parameter> and
                    <parameter>size_max</parameter> query parameters
                to perform greater-than and less-than filtering of
                images based on their <parameter>size</parameter>
                attribute. The size is measured in bytes and refers to
                the size of an image when it is stored on disk.</para>
            <para>For example, sending a
                    <parameter>size_min</parameter> filter of 1048576
                and size_max of 4194304 filters the container to
                include only images that are between 1 MB and 4 MB in
                size.</para>
            <para>You can sort the results of this operation by using
                the <parameter>sort_key</parameter> and
                    <parameter>sort_dir</parameter> parameters. The
                API uses the natural sorting of whatever image
                attribute is provided as the
                    <parameter>sort_key</parameter>. </para>
            <note>
                <para>Public images may reach end-of-life and be
                    removed from the base image list. This <link
                        xlink:href="http://www.rackspace.com/knowledge_center/article/hidden-base-images"
                        > Hidden Base Images article</link> contains
                    images which have been removed from the base
                    images list but which may still be
                    available.</para>
            </note>
        </wadl:doc>
        <request>
            <representation mediaType="application/json">
                &imagesListQueryParameters;</representation>
        </request>
        <response status="200">
            <doc title="Success">Request succeeded.</doc>
            <representation mediaType="application/json">
                <doc xml:lang="EN">
                    <xsdxt:sample>
                        <xsdxt:code
                            href="../common/samples/image-list-response.json"
                        />
                    </xsdxt:sample>
                </doc> &imageListResponseParameters; </representation>
        </response> &commonFaults; &getFaults;</method>

    <!-- Get Image -->
    <method name="GET" id="getImage">
        <wadl:doc xml:lang="EN" title="Get image details"
            xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">Gets the details for the specified
                image. </para>
            <para>This operation shows the details for the image. The
                response body is a single image entity and conforms to
                the schema found in <xref
                    linkend="GET_getImageSchema_schemas_image_Schema_Calls"
                />.</para>
        </wadl:doc>
        <response status="200">
            <representation mediaType="application/json">
                <doc xml:lang="EN">
                    <xsdxt:sample>
                        <xsdxt:code
                            href="../common/samples/image-details-response.json"
                        />
                    </xsdxt:sample>
                </doc>&imageResponseParameters; </representation>
        </response> &commonFaults; &getFaults; </method>

    <!-- Update Image -->
    <method name="PATCH" id="updateImage">
        <wadl:doc xml:lang="EN" title="Update image"
            xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">Updates the specified image. </para>
            <para>This operation allows you to update an image that
                you own. The request body must conform to the
                    <code>'application/openstack-images-v2.1-json-patch'</code>
                media type. The response conforms to the schema found
                in <xref
                    linkend="GET_getImageSchema_schemas_image_Schema_Calls"
                />.</para>
            <para>You can use the <code>HTTP PATCH</code> method to
                update certain standard properties, and to add,
                update, or remove custom, user-defined image
                properties. For more information, see <xref
                    linkend="patch-method"/> in this guide. Here are
                some guidelines for custom, user-defined properties. <itemizedlist>
                    <listitem>
                        <para>Adding properties: You can add custom
                            properties to your image.</para>
                        <itemizedlist>
                            <listitem>
                                <para>Naming properties: We recommend
                                   you name a custom property by
                                   prefixing your domain or name, and
                                   we do not allow you to use
                                   <literal>com.rackspace</literal> as
                                   the prefix. For example,
                                   <literal>com.mycompany.myproperty</literal>
                                   and
                                   <literal>myname.myproperty</literal>
                                   are valid, and
                                   <literal>com.rackspace.myproperty</literal>
                                   is not allowed.</para>
                                <para>Do not use the prefix
                                   <literal>org.openstack</literal>
                                   since OpenStack might add a
                                   property with the same name.</para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                    <listitem>
                        <para>Deleting properties: You can delete any
                            custom property which you previously added
                            to your image.</para>
                    </listitem>
                    <listitem>
                        <para>Updating properties: You can update any
                            custom properties that you previously
                            added to an image that you own, and you
                            can update the following standard
                            properties:</para>
                        <itemizedlist>
                            <listitem>
                                <para><parameter>name</parameter></para>
                            </listitem>
                            <listitem>
                                <para><parameter>tags</parameter></para>
                            </listitem>
                            <listitem>
                                <para><parameter>os_distro</parameter></para>
                            </listitem>
                            <listitem>
                                <para><parameter>os_version</parameter></para>
                            </listitem>
                            <listitem>
                                <para><parameter>protected</parameter></para>
                            </listitem>
                            <listitem>
                                <para><parameter>container_format</parameter>
                                   (changing this may render your
                                   image unusable)</para>
                            </listitem>
                            <listitem>
                                <para><parameter>disk_format</parameter>
                                   (changing this may render your
                                   image unusable)</para>
                            </listitem>
                            <listitem>
                                <para><parameter>min_disk</parameter>
                                   (changing this affects what flavors
                                   you can use with the image)</para>
                            </listitem>
                            <listitem>
                                <para><parameter>min_ram</parameter>
                                   (changing this affects what flavors
                                   you can use with the image)</para>
                            </listitem>
                            <listitem>
                                <para><parameter>ramdisk_id</parameter>
                                   (only applies to disk_format of
                                   <literal>ami</literal>)</para>
                            </listitem>
                            <listitem>
                                <para><parameter>kernel_id</parameter>
                                   (only applies to disk_format of
                                   <literal>ami</literal>)</para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                </itemizedlist>
            </para>
            <para>In general, you can update any properties you own,
                but do not expect to be able to update anyone else's
                properties. For example, you can't update any
                properties starting with
                    <literal>com.rackspace</literal>, and you might
                not be able to update some properties starting with
                    <literal>org.openstack</literal>.</para>
        </wadl:doc>
        <request>
            <representation mediaType="application/json"
                element="image">
                <wadl:doc xml:lang="EN"
                    xmlns="http://docbook.org/ns/docbook">
                    <para>The following example updates two properties
                        for the image: <literal>name</literal> and
                            <literal>tag</literal>.</para>
                    <tip><para>Like all Images API calls, the Image
                            Update operation requires the Content-Type
                            header to match the media type used for
                            the body of the request. If this header is
                            missing or does not match a supported
                            media type, the call results in a
                                <errorcode>415</errorcode> error.
                            Don't forget that the Content-type for the
                            Image Update operation must be the
                            appropriate media-type descriptor for the
                            HTTP Patch method (see <xref
                                linkend="patch-method"/>). For
                            example: <literal>Content-Type:
                                application/openstack-images-v2.1-json-patch</literal>.</para></tip>
                    <xsdxt:sample>
                        <xsdxt:code
                            href="../common/samples/image-update-req.json"
                        />
                    </xsdxt:sample>
                </wadl:doc>
                <param name="." style="plain" path="$.parameters "/>
                <param name="op" style="plain" type="xsd:string"
                    required="true" path="$.parameters.op">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook"
                        xml:lang="EN">
                        <para>The operation to be executed
                                (<code>add</code>,
                            <code>remove</code>, or
                                <code>replace</code>).</para>
                    </wadl:doc>
                </param>
                <param name="path" style="plain" type="xsd:string"
                    required="true" path="$.parameters.path">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook"
                        xml:lang="EN">
                        <para>The location within the image where the
                            operation is to be performed.</para>
                    </wadl:doc>
                </param>
                <param name="value" style="plain" type="xsd:string"
                    required="false" path="$.parameters.value">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook"
                        xml:lang="EN">
                        <para>The actual value to be added or
                            replaced. It is not required for the
                                <code>delete</code> operation.</para>
                    </wadl:doc>
                </param>
            </representation>
        </request>
        <response status="200">
            <doc title="Success">Request succeeded.</doc>
            <representation mediaType="application/json">
                <doc xml:lang="EN">
                    <xsdxt:sample>
                        <xsdxt:code
                            href="../common/samples/image-update-response.json"
                        />
                    </xsdxt:sample>
                </doc> &imageResponseParameters; </representation>
        </response> &commonFaults; &postPutFaults; </method>

    <!-- Delete Image -->
    <method name="DELETE" id="deleteImage">
        <wadl:doc xml:lang="EN" title="Delete image"
            xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">Deletes the specified image. </para>
            <para>This operation deletes the image. Make sure you set
                    <parameter>protected</parameter> parameter to
                false (Boolean) before performing the delete. If the
                operation succeeds, it returns an <errorcode>HTTP
                    204</errorcode> status code with no response body. </para>
            <warning><para>An attempt to delete an image with the
                        <parameter>protected</parameter> parameter set
                    to <code>true</code> (boolean) results in a
                    response code <errorcode>HTTP
                    403</errorcode>.</para>
            </warning>
        </wadl:doc>
        <response status="204">
            <doc title="Delete Successful">Delete request
                succeeded.</doc>
            <representation mediaType="application/json"/>
        </response> &commonFaults; &getFaults;</method>

    <!--Create Image -->
    <!--    <method name="POST" id="createImage">
        <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook" title="Create Image">
            <para role="shortdesc">Creates a virtual machine (VM) image. </para>
            <para>This operation creates an image with a Location header that contains the newly-created URI for the image.
                The response body represents the created image entity.</para>
        </wadl:doc>
        <request>
            <representation mediaType="application/json" element="image">
                <doc xml:lang="EN">
                    <xsdxt:sample>
                        <xsdxt:code href="../common/samples/image-create-req.json"/>
                    </xsdxt:sample>
                </doc>
                <param name="name" style="plain" type="xsd:string" required="true" path="$.name">
                    <wadl:doc xmlns="http://www.w3.org/1999/xhtml" xml:lang="EN" title="Images name">
                        <para>Name for the image. The name of an image is not unique to an image node, because the API does not
                            expect users to know the names of images owned by others.</para>
                    </wadl:doc>
                </param>
                <param name="id" style="plain" type="csapi:uuid" required="false" path="$.id">
                    <wadl:doc xmlns="http://www.w3.org/1999/xhtml" xml:lang="EN" title="Image ID">
                        <para>The image ID.</para>
                    </wadl:doc>
                </param>
                <param name="visibility" style="plain" type="xsd:string" required="false">
                    <wadl:doc xmlns="http://www.w3.org/1999/xhtml" xml:lang="EN" title="Visibility">
                        <para>Image visibility. Valid values are <code>public</code> or <code>private</code>. The default is
                                <code>public</code>.</para>
                    </wadl:doc>
                </param>
                <param name="tags" style="plain" type="xsd:dict" required="false" path="$.tags">
                    <wadl:doc xmlns="http://www.w3.org/1999/xhtml" xml:lang="EN" title="Tags">
                        <para>The user-defined image tags.</para>
                    </wadl:doc>
                </param>
            </representation>
        </request>
        <response status="201">
            <doc title="Success">Create Request succeeded.</doc>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN">
                    <para> The response is created with a Location header that contains the newly created URI for the image.
                        The response body represents the created image entity. </para>
                    <xsdxt:sample>
                        <xsdxt:code href="../common/samples/image-create-response.json"/>
                    </xsdxt:sample>
                </wadl:doc>
            </representation>
        </response> &commonFaults; &postPutFaults; </method>-->

    <!-- ==================== -->
    <!-- Image Tag Operations -->
    <!-- ==================== -->

    <!-- Add Image Tag -->
    <method name="PUT" id="addImageTag">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN"
            title="Add image tag">
            <para role="shortdesc">Adds the specified tag to the
                specified image. </para>
            <para>This operation adds the specified tag to the
                specified image. </para>
            <para>Include the tag you want to add in the request URI
                    <replaceable>{tag}</replaceable> path segment of
                the URI. For example, to tag image
                e7db3b45-8db7-47ad-8109-3fb55c2c24fd with 'miracle',
                you would use: <code>PUT
                    /v2/images/e7db3b45-8db7-47ad-8109-3fb55c2c24fd/tags/miracle</code>.
                The request body is ignored. </para>
            <para>An image can only be tagged once with a specific
                string. Multiple attempts to tag an image with the
                same string will result in a single instance of that
                string being added to the image's tags list.</para>
        </wadl:doc>
        <response status="204">
            <doc title="Success">Request succeeded.</doc>
            <representation mediaType="application/json"/>
        </response> &commonFaults; &postPutFaults; </method>

    <!-- Delete Image Tag -->
    <method name="DELETE" id="deleteImageTag">
        <wadl:doc xml:lang="EN" title="Delete image tag"
            xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">Deletes the specified tag from the
                image. </para>
            <para>This operation deletes the specified tag from the
                specified image. </para>
            <para>Include the tag you want to remove in the request
                URI <replaceable>{tag}</replaceable> path segment of
                the URI. For example, to remove the image tag
                'miracle' from image
                e7db3b45-8db7-47ad-8109-3fb55c2c24fd, you would use:
                    <code>DELETE
                    /v2/images/e7db3b45-8db7-47ad-8109-3fb55c2c24fd/tags/miracle</code>.
                The request body is ignored. </para>
            <para>An image tag can only be removed once. Subsequent
                attempts to remove the same tag will result in an
                    <errorcode>HTTP 404</errorcode> error.</para>
        </wadl:doc>
        <response status="204">
            <doc title="Delete Successful">Delete request
                succeeded.</doc>
            <representation mediaType="application/json"/>
        </response> &commonFaults; &getFaults; </method>

    <!-- =============================== -->
    <!-- Image Sharing/Member Operations -->
    <!-- =============================== -->

    <!-- List Image Members -->
    <method name="GET" id="listImageMembers">
        <wadl:doc xml:lang="EN" title="List image members"
            xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">Returns collection of members
                (users) with whom the image has been shared.</para>
            <para> This operation returns collection of members
                (users) with whom the image has been shared. The
                response conforms to the schema found in <xref
                    linkend="GET_getImageMembersSchemas_schemas_members_Schema_Calls"
                />.</para>
            <para>If a user with whom this image is shared makes this
                call, the member list contains only information for
                that user. If a user with whom this image has not been
                shared makes this call, the response is
                    <errorcode>HTTP 404</errorcode>. </para>
        </wadl:doc>
        <request>
            <representation mediaType="application/json">
                &imageMembersListQueryParameters; </representation>
        </request>
        <response status="200">
            <doc title="Success">Request succeeded.</doc>
            <representation mediaType="application/json">
                <wadl:doc xml:lang="EN"
                    xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code
                        href="../common/samples/image-members-list-response.json"
                    />
                </wadl:doc> &imageMemberListResponseParameters;
            </representation>
        </response> &commonFaults; &getFaults; </method>

    <!-- Create Image Member -->
    <method name="POST" id="createImageMember">
        <wadl:doc xml:lang="EN" xmlns="http://docbook.org/ns/docbook"
            title="Create image member">
            <para role="shortdesc">Adds the specified
                    <parameter>account ID/tenant ID</parameter>
                specified in the request body as an image
                member.</para>
            <para>This operation allows you to add users to the list
                of members with whom the image is shared. The member
                status of a newly created image member is
                    <literal>pending</literal>. The response conforms
                to the schema found in <xref
                    linkend="GET_getImageMemberSchema_schemas_member_Schema_Calls"
                />.</para>
            <para>If the user making the call is not the image owner,
                the response is <errorcode>HTTP
                404</errorcode>.</para>
        </wadl:doc>
        <request>
            <representation mediaType="application/json">
                <wadl:doc xml:lang="EN"
                    xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code
                        href="../common/samples/image-member-create-request.json"
                    />
                </wadl:doc>
                <param name="." style="plain" path="$.parameters "/>
                <param name="member" style="plain" type="xsd:string"
                    required="true" path="$.parameters.member">
                    <wadl:doc xml:lang="EN"
                        xmlns="http://docbook.org/ns/docbook"
                        title="Image member status">
                        <para>The member ID. This is the tenant ID of
                            the user with whom the image is to be
                            shared.</para>
                    </wadl:doc>
                </param>
            </representation>
        </request>
        <response status="200">
            <doc title="Success">Request succeeded.</doc>
            <representation mediaType="application/json">
                <wadl:doc xml:lang="EN"
                    xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code
                        href="../common/samples/image-member-create-response.json"
                    />
                </wadl:doc>
                <param name="." style="plain" path="$.parameters "/>
                &imageMemberResponseParameters; </representation>
        </response> &commonFaults; &postPutFaults;</method>

    <!-- Get Image Member-->
    <method name="GET" id="getImageMember">
        <wadl:doc xml:lang="EN" title="Get image member details"
            xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">Gets the details for the specified
                image member. </para>
            <para>This operation shows details of the image member.
                The response conforms to the schema found in <xref
                    linkend="GET_getImageMemberSchema_schemas_member_Schema_Calls"
                />.</para>
            <para>To get a successful response, either the image owner
                must make the call or the
                    <parameter>tenant_id</parameter> of the user
                making the call must match the specified
                    <parameter>member_id</parameter>. Otherwise the
                response is <errorcode>HTTP 404</errorcode>.</para>
        </wadl:doc>
        <response status="200">
            <doc title="Success">Request succeeded.</doc>
            <representation mediaType="application/json">
                <doc xml:lang="EN">
                    <xsdxt:sample>
                        <xsdxt:code
                            href="../common/samples/image-member-details-response.json"
                        />
                    </xsdxt:sample>
                </doc>
                <param name="." style="plain" path="$.parameters "/>
                &imageMemberResponseParameters; </representation>
        </response> &commonFaults; &getFaults; </method>

    <!-- Update Image Member -->
    <method name="PUT" id="updateImageMember">
        <wadl:doc xml:lang="EN" title="Update image member"
            xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">Sets the specified status for the
                specified member of the specified image.</para>
            <para>This operation updates the image member. The
                response conforms to the schema found in <xref
                    linkend="GET_getImageMemberSchema_schemas_member_Schema_Calls"
                />.</para>
            <para>If the call is made by the image owner, the response
                is <errorcode>HTTP 403 (Forbidden)</errorcode>.</para>
            <para>If the call is made by a user who is not the owner
                and whose <parameter>tenant ID</parameter> is not the
                same as the {member_id} is the operation URI, the
                response is <errorcode>HTTP 404</errorcode>.</para>
        </wadl:doc>
        <request>
            <representation mediaType="application/json">
                <wadl:doc xml:lang="EN"
                    xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code
                        href="../common/samples/image-member-update-request.json"
                    />
                </wadl:doc>
                <param name="." style="plain" path="$.parameters "/>
                <param name="status" style="plain" type="xsd:string"
                    required="true" path="$.parameters.status">
                    <wadl:doc xml:lang="EN"
                        xmlns="http://docbook.org/ns/docbook">
                        <para>The status to which this image member
                            should be set. Valid values are as
                            follows: <variablelist>
                                <varlistentry>
                                   <term><code>pending</code></term>
                                   <listitem>
                                   <para>At creation, the member's
                                   status is set to pending. The image
                                   is not visible in the member's
                                   image-list, but the member can
                                   still boot instances from the
                                   image. </para>
                                   </listitem>
                                </varlistentry>
                                <varlistentry>
                                   <term><code>accepted</code></term>
                                   <listitem>
                                   <para>The image is visible in the
                                   member's image-list. The member can
                                   boot instances from the image.
                                   </para>
                                   </listitem>
                                </varlistentry>
                                <varlistentry>
                                   <term><code>rejected</code></term>
                                   <listitem>
                                   <para>The member has decided that
                                   he or she does not want to see the
                                   image. The image is not visible in
                                   the member's image-list, but the
                                   member can still boot instances
                                   from the image. </para>
                                   </listitem>
                                </varlistentry>
                            </variablelist>
                        </para>
                    </wadl:doc>
                </param>
            </representation>
        </request>
        <response status="200">
            <doc title="Success">Request succeeded.</doc>
            <representation mediaType="application/json">
                <wadl:doc xml:lang="EN"
                    xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code
                        href="../common/samples/image-member-update-response.json"
                    />
                </wadl:doc>
                <param name="." style="plain" path="$.parameters "/>
                &imageMemberResponseParameters; </representation>
        </response> &commonFaults; &postPutFaults;</method>

    <!-- Delete Image Member -->
    <method name="DELETE" id="deleteImageMember">
        <wadl:doc xml:lang="EN" title="Delete image member"
            xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">Deletes the specified
                    <parameter>account ID/tenant ID</parameter> from
                the member list of the specified image.</para>
            <para>This operation deletes the image member from the
                image. This call, which can only be made by the image
                owner, removes users from the list of members who have
                access to a shared image.</para>
            <para>If the <parameter>{member_id}</parameter> is not a
                member of the specified image, the response is
                    <errorcode>HTTP 404</errorcode></para>
        </wadl:doc>
        <response status="204">
            <doc title="Success">Delete request succeeded.</doc>
            <representation mediaType="application/json"/>
        </response> &commonFaults; &getFaults;</method>

    <!-- =============== -->
    <!-- Task Operations -->
    <!-- =============== -->

    <!-- List Tasks -->
    <method name="GET" id="listTasks">
        <wadl:doc xml:lang="EN" title="List tasks"
            xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">Lists tasks.</para>
            <para>This operation returns list of tasks, with basic
                details about each task. The response conforms to the
                schema found in <xref
                    linkend="GET_getTasksSchemas_schemas_tasks_Schema_Calls"
                />.</para>
        </wadl:doc>
        <response status="200">
            <doc title="Success">Request succeeded.</doc>
            <representation mediaType="application/json">
                <wadl:doc xml:lang="EN"
                    xmlns="http://docbook.org/ns/docbook"
                    title="List Tasks">
                    <xsdxt:code
                        href="../common/samples/task-list-response.json"
                    />
                </wadl:doc> &taskListResponseParameters;
            </representation>
        </response>&commonFaults;&getFaults; </method>

    <!-- Task Details -->
    <method name="GET" id="getTask">
        <wadl:doc xml:lang="EN" title="Get task details"
            xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">Gets the details for the specified
                task.</para>
            <para>This operation shows the details for the specified
                task, including the status, so you'll know when the
                import or export task completes and whether it worked.
                For more information on statuses, see <xref
                    linkend="task-statuses"/>. The response conforms
                to the schema found in <xref
                    linkend="GET_getTaskSchema_schemas_task_Schema_Calls"
                />.</para>
        </wadl:doc>
        <response status="200">
            <doc title="Success">Request succeeded.</doc>
            <!--import pending-->
            <representation mediaType="application/json">
                <wadl:doc xml:lang="EN"
                    xmlns="http://docbook.org/ns/docbook"
                    title="Import Task - Pending Response">
                    <xsdxt:code
                        href="../common/samples/task-detail-import-pending-response.json"
                    />
                </wadl:doc> &task--portResponseParameters-top;
                &taskImportResponseParameters-input;
                &task--portResponseParameters-bottom; </representation>
            <!--import success-->
            <representation mediaType="application/json">
                <wadl:doc xml:lang="EN"
                    xmlns="http://docbook.org/ns/docbook"
                    title="Import Task - Success Response">
                    <xsdxt:code
                        href="../common/samples/task-detail-import-success-response.json"
                    />
                </wadl:doc>
            </representation>
            <!--import failure-->
            <representation mediaType="application/json">
                <wadl:doc xml:lang="EN"
                    xmlns="http://docbook.org/ns/docbook"
                    title="Import Task - Failure Response">
                    <xsdxt:code
                        href="../common/samples/task-detail-import-failure-response.json"
                    />
                </wadl:doc>
            </representation>
            <!--export pending-->
            <representation mediaType="application/json">
                <wadl:doc xml:lang="EN"
                    xmlns="http://docbook.org/ns/docbook"
                    title="Export Task - Pending Response">
                    <xsdxt:code
                        href="../common/samples/task-detail-export-pending-response.json"
                    />
                </wadl:doc> &task--portResponseParameters-top;
                &taskExportResponseParameters-input;
                &task--portResponseParameters-bottom; </representation>
            <!--export success-->
            <representation mediaType="application/json">
                <wadl:doc xml:lang="EN"
                    xmlns="http://docbook.org/ns/docbook"
                    title="Export Task - Success Response">
                    <xsdxt:code
                        href="../common/samples/task-detail-export-success-response.json"
                    />
                </wadl:doc>
            </representation>
            <!--export failure-->
            <representation mediaType="application/json">
                <wadl:doc xml:lang="EN"
                    xmlns="http://docbook.org/ns/docbook"
                    title="Export Task - Failure Response">
                    <xsdxt:code
                        href="../common/samples/task-detail-export-failure-response.json"
                    />
                </wadl:doc>
            </representation>
        </response>&commonFaults;&getFaults;</method>

    <!-- Import Image -->
    <method name="POST" id="importImage">
        <wadl:doc xml:lang="EN" title="Task to import image"
            xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">Imports an image using an
                asynchronous task request. See the request body for
                specific details.</para>
            <para>This operation imports an image using an
                asynchronous task request. The request begins the
                import process and returns the task UUID that can be
                subsequently polled to determine the status of the
                import by using the <xref
                    linkend="GET_getTask_tasks__taskID__Image_Task_Calls"
                /> operation. The response conforms to the schema
                found in <xref
                    linkend="GET_getTaskSchema_schemas_task_Schema_Calls"
                />.</para>
            <para>To successfully import an image, </para>
            <itemizedlist>
                <listitem>
                    <para>Format the image using the VHD
                        format.</para>
                    <note>
                        <para>If you are importing an image that you
                            have previously exported from Cloud Images
                            in another region of the Rackspace open
                            cloud, your image is already in the
                            appropriate format. You can find
                            information on <link
                                xlink:href="http://www.rackspace.com/knowledge_center/article/preparing-an-image-for-import-into-the-rackspace-open-cloud"
                                >preparing a custom image for
                                import</link> in the Rackspace
                            Knowledge Center.</para>
                    </note>
                </listitem>
                <listitem>
                    <para>Store the image in your Cloud Files
                        account.</para>
                </listitem>
            </itemizedlist>
            <note>
                <para> As described in the <link
                        xlink:href="http://docs.rackspace.com/images/api/v2/ci-devguide/content/ch_image-service-dev-overview.html"
                        > Rackspace Terms of Service</link>, you
                    should be aware of and respect all licensing
                    restrictions that apply to any software that you
                    import into the Rackspace open cloud. For example,
                    Microsoft licensing rules are very restrictive.
                    Microsoft product use rights do not allow the use
                    of License Mobility for Windows licenses. Given
                    the limitations related to this software platform,
                    image import is not available for Windows images.
                    If you have questions, please contact the software
                    vendor. </para>
            </note>
        </wadl:doc>
        <request>
            <representation mediaType="application/json">
                <wadl:doc xml:lang="EN"
                    xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code
                        href="../common/samples/task-import-req.json"
                    />
                </wadl:doc>&taskImportRequestParameters;
            </representation>
        </request>
        <response status="201">
            <doc title="Success">Request succeeded.</doc>
            <representation mediaType="application/json">
                <wadl:doc xml:lang="EN"
                    xmlns="http://docbook.org/ns/docbook"
                    title="Import Task - Pending Response">
                    <xsdxt:code
                        href="../common/samples/task-detail-import-pending-response.json"
                    />
                </wadl:doc>
                <!--<param name="location_id" style="header" type="xsd:string" required="true" path="$.location_id">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">The location of the task resource that is needed for polling
                    the progress of the import request.</wadl:doc>
            </param>-->
                &task--portResponseParameters-top;&taskImportResponseParameters-input;
                &task--portResponseParameters-bottom;
            </representation>
        </response>&commonFaults; &postPutFaults; </method>

    <!-- Export Image -->
    <method name="POST" id="exportImage">
        <wadl:doc xml:lang="EN" title="Task to export image"
            xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">Exports an image using an
                asynchronous task request. See the request body for
                specific details.</para>
            <para>This operation exports an image in VHD format using
                an asynchronous task request to export. The request
                begins the export process and returns the task UUID
                that can be subsequently polled to determine the
                status of the export by using the <xref
                    linkend="GET_getTask_tasks__taskID__Image_Task_Calls"
                /> operation. The response conforms to the schema
                found in <xref
                    linkend="GET_getTaskSchema_schemas_task_Schema_Calls"
                />. </para>
            <note>
                <para>The exported image is deposited in your Cloud
                    Files account and is identified by the
                        <parameter>image_uuid</parameter> with a .vhd
                    extension. You are responsible for ensuring that
                    any distribution of your image from the Rackspace
                    open cloud complies with any licensing
                    restrictions.</para>
            </note>
        </wadl:doc>
        <request>
            <representation mediaType="application/json">
                <wadl:doc xml:lang="EN"
                    xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code
                        href="../common/samples/task-export-req.json"
                    />
                </wadl:doc>&taskExportRequestParameters;</representation>
        </request>
        <response status="201">
            <doc title="Success">Task export request succeeded.</doc>
            <representation mediaType="application/json">
                <wadl:doc xml:lang="EN"
                    xmlns="http://docbook.org/ns/docbook"
                    title="Export Task - Pending Response">
                    <xsdxt:code
                        href="../common/samples/task-detail-export-pending-response.json"
                    />
                </wadl:doc> &task--portResponseParameters-top;
                &taskExportResponseParameters-input;
                &task--portResponseParameters-bottom;
                <!--<param name="location_id" style="header" type="xsd:string" required="true" path="$.location_id">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">The location of the task resource that is needed for polling
                    the progress of the export request.</wadl:doc>
            </param>-->
            </representation>
        </response>&commonFaults; &postPutFaults; </method>

    <!-- ===================== -->
    <!-- Image File Operations -->
    <!-- ===================== -->

    <!-- Upload Image -->
    <!--    <method name="PUT" id="storeImageFile">
        <wadl:doc xml:lang="EN" title="Upload Binary Image Data" xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">Uploads binary image data. </para>
            <para>This operation uploads the binary image data. An image record must exist before a client can store binary
                image data with it. </para>
            <para>Content-Type must be <code>application/octet-stream</code>. The complete request body is stored and is
                accessible in its entirety by issuing a &GET; request to the same URI. </para>
        </wadl:doc>
        <response status="204">
            <doc title="Success">Upload Request succeeded.</doc>
        </response> &commonFaults; &postPutFaults; </method>-->

    <!-- Download Image -->
    <!--    <method name="GET" id="getImageFile">
        <wadl:doc xml:lang="EN" title="Download Binary Image Data" xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">Downloads binary image data.</para>
            <para>This operation downloads the binary image data. The response body contains the raw binary data that
                represents the actual virtual disk. The Content-Type header is <code>application/octet-stream</code>. The
                Content-MD5 header contains an MD5 checksum of the image data. Clients are encouraged to verify the integrity
                of the image data that they receive by using this checksum.</para>
        </wadl:doc>
        <response status="200">
            <doc title="Success">Request succeeded.</doc>
            <wadl:doc xmlns="http://docbook.org/ns/docbook">
                <para>If no image data exists, the response returns <errorcode>HTTP 204</errorcode> status code.</para>
            </wadl:doc>
        </response>
        <response status="204">
            <doc title="No Data Exists"> Download request failed because no data exists.</doc>
        </response> &commonFaults; &getFaults; </method>-->
</application>
